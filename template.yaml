AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - Amazon API Gateway to AWS Lambda to Amazon DynamoDB

# Parameters to be provided
Globals:
  Function:
    Runtime: python3.10
    CodeUri: src/
    Environment:
      Variables:
        TABLE_NAME: !Ref TableName

  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: True
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin:  "'*'"

Resources:
  WeatherApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  CreateWeather:
    Type: AWS::Serverless::Function
    Description: 'Lambda function inserts data into DynamoDB table'
    Properties:
      FunctionName: CreateWeatherItem
      Handler: create_weather.lambda_handler
      Policies:
        DynamoDBCrudPolicy:
          TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /create-weather
            Method: POST
            RestApiId: !Ref WeatherApi

  GetWeatherFunction:
    Type: AWS::Serverless::Function
    Description: 'Lambda function to retrieve weather item from DynamoDB table'
    Properties:
      FunctionName: GetWeatherItems
      Handler: get_weathers.lambda_handler
      Policies:
        DynamoDBCrudPolicy:
          TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref WeatherApi
  

  GetSingleWeatherFunction:
    Type: AWS::Serverless::Function
    Description: 'Lambda function to retrieve weather item from DynamoDB table'
    Properties:
      FunctionName: GetWeatherItem
      Handler: get_single_weather.lambda_handler
      Policies:
        DynamoDBCrudPolicy:
          TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /weather/{id}
            Method: GET
            RestApiId: !Ref WeatherApi
            
  DeleteWeatherFunction:
    Type: AWS::Serverless::Function
    Description: 'Lambda function remove weather item from DynamoDB table'
    Properties:
      FunctionName: DeleteWeatherItem
      Handler: delete_weather.lambda_handler
      Policies:
        DynamoDBCrudPolicy:
          TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WeatherApi
            Path: /delete-weather/{id}
            Method: DELETE  

  UpdateLambdaFunction:
    Type: AWS::Serverless::Function
    Description: 'Lambda function updates weather item in DynamoDB table'
    Properties:
      FunctionName: UpdateWeatherItem
      Handler: update_weather.lambda_handler
      Policies:
        DynamoDBCrudPolicy:
          TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WeatherApi 
            Path: /update-weather/{id}
            Method: PUT 

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      UserPoolName: WeatherUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes: 
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false  
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH 
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile    

    # Create a hosted domain for users to signup and login
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub weatherauth${AWS::AccountId}
      UserPoolId: !Ref UserPool
  DynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: WeatherDataTable

Outputs:
  EndpointUrl:
    Description: 'Weather REST API endpoint URL'
    Value: !Sub 'https://${WeatherApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'